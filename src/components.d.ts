/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BaseMap } from "./components/map-selection/types";
export { BaseMap } from "./components/map-selection/types";
export namespace Components {
    interface VisMap {
        "baseMap": BaseMap;
    }
    interface VisMapSelection {
    }
    interface VisRoot {
    }
}
export interface VisMapSelectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVisMapSelectionElement;
}
declare global {
    interface HTMLVisMapElement extends Components.VisMap, HTMLStencilElement {
    }
    var HTMLVisMapElement: {
        prototype: HTMLVisMapElement;
        new (): HTMLVisMapElement;
    };
    interface HTMLVisMapSelectionElementEventMap {
        "baseMapSelected": BaseMap;
    }
    interface HTMLVisMapSelectionElement extends Components.VisMapSelection, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVisMapSelectionElementEventMap>(type: K, listener: (this: HTMLVisMapSelectionElement, ev: VisMapSelectionCustomEvent<HTMLVisMapSelectionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVisMapSelectionElementEventMap>(type: K, listener: (this: HTMLVisMapSelectionElement, ev: VisMapSelectionCustomEvent<HTMLVisMapSelectionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVisMapSelectionElement: {
        prototype: HTMLVisMapSelectionElement;
        new (): HTMLVisMapSelectionElement;
    };
    interface HTMLVisRootElement extends Components.VisRoot, HTMLStencilElement {
    }
    var HTMLVisRootElement: {
        prototype: HTMLVisRootElement;
        new (): HTMLVisRootElement;
    };
    interface HTMLElementTagNameMap {
        "vis-map": HTMLVisMapElement;
        "vis-map-selection": HTMLVisMapSelectionElement;
        "vis-root": HTMLVisRootElement;
    }
}
declare namespace LocalJSX {
    interface VisMap {
        "baseMap": BaseMap;
    }
    interface VisMapSelection {
        "onBaseMapSelected"?: (event: VisMapSelectionCustomEvent<BaseMap>) => void;
    }
    interface VisRoot {
    }
    interface IntrinsicElements {
        "vis-map": VisMap;
        "vis-map-selection": VisMapSelection;
        "vis-root": VisRoot;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "vis-map": LocalJSX.VisMap & JSXBase.HTMLAttributes<HTMLVisMapElement>;
            "vis-map-selection": LocalJSX.VisMapSelection & JSXBase.HTMLAttributes<HTMLVisMapSelectionElement>;
            "vis-root": LocalJSX.VisRoot & JSXBase.HTMLAttributes<HTMLVisRootElement>;
        }
    }
}
